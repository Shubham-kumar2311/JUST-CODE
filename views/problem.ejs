<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('partials/head') %>
  <title><%= problem.title %> - JUST CODE</title>
  <!-- CodeMirror CSS -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/theme/monokai.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.css">

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background: linear-gradient(135deg, #1e1e1e 0%, #2a2a2a 100%);
      color: #fff;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .main-container {
      max-width: 1400px;
      margin: 2rem auto;
      padding: 0 1rem;
      display: flex;
      gap: 2rem;
      flex: 1;
    }

    .left-panel {
      flex: 1;
      background: rgba(255, 255, 255, 0.05);
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      overflow-y: auto;
    }

    .left-panel .problem-header {
      margin-bottom: 1rem;
    }

    .left-panel .problem-header strong {
      font-size: 2rem;
      font-weight: 800;
      color: #ff4d4d;
    }

    .left-panel p {
      color: #bbb;
      line-height: 1.6;
      font-size: 1rem;
    }

    .example-section,
    .testcase-section,
    .input-format-section {
      background: rgba(255, 255, 255, 0.1);
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1.5rem;
    }

    .testcase-list {
      list-style-type: none;
      padding: 0;
    }

    .testcase-list li {
      margin-bottom: 1rem;
      font-size: 0.95rem;
    }

    .testcase-list strong {
      color: #fff;
    }

    .right-panel {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .code-editor-container {
      background: #212529;
      border-radius: 10px;
      padding: 1rem;
      flex: 3;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      position: relative;
      max-height: 600px;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .editor-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 10px;
    }

    .CodeMirror {
      flex: 1;
      border-radius: 5px;
      height: auto;
    }

    .CodeMirror-scroll {
      overflow-y: auto;
      overflow-x: auto;
      max-height: calc(600px - 50px);
    }

    #codeEditor {
      display: none;
    }

    .terminal-container {
      background: #212529;
      color: #fff;
      padding: 1rem;
      border-radius: 10px;
      flex: 1;
      position: relative;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      overflow-y: auto;
    }

    .terminal-content {
      margin-right: 70px;
      font-size: 0.9rem;
      max-height: 200px;
      overflow-y: auto;
      word-wrap: break-word;
    }

    #copyTerminal {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #ff4d4d;
      border: none;
      padding: 5px 10px;
      border-radius: 5px;
      color: #fff;
    }

    #copyTerminal:hover {
      background: #e03e3e;
    }

    .button-container {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      flex-wrap: wrap;
    }

    .btn-custom {
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.9rem;
      font-weight: 600;
      transition: all 0.3s ease;
      border: none;
    }

    .btn-ai { background: #17a2b8; }
    .btn-ai:hover { background: #138496; }
    .btn-syntax { background: #f0ad4e; color: #1a1a1a; }
    .btn-syntax:hover { background: #e0a800; }
    .btn-run { background: #28a745; }
    .btn-run:hover { background: #218838; }
    .btn-submit { background: #ff4d4d; }
    .btn-submit:hover { background: #e03e3e; }
    .btn-history { background: #6c757d; }
    .btn-history:hover { background: #5a6268; }

    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
      margin-left: 5px;
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    .history-panel {
      position: fixed;
      top: 0;
      right: -50vw;
      width: 50vw;
      height: 100vh;
      background: #212529;
      padding: 2rem;
      box-shadow: -5px 0 15px rgba(0, 0, 0, 0.3);
      transition: right 0.3s ease;
      overflow-y: auto;
      overflow-x: hidden;
      color: #fff;
      z-index: 1000;
    }

    .history-panel.active {
      right: 0;
    }

    .history-panel h4 {
      color: #ff4d4d;
      margin-bottom: 1rem;
    }

    .history-entry {
      background: rgba(255, 255, 255, 0.1);
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
      cursor: pointer;
    }

    .history-entry:hover {
      background: rgba(255, 255, 255, 0.15);
    }

    #closeHistory {
      position: absolute;
      top: 10px;
      right: 10px;
      background: #ff4d4d;
      border: none;
      padding: 5px 10px;
      border-radius: 5px;
      color: #fff;
      cursor: pointer;
      font-size: 1rem;
    }

    #closeHistory:hover {
      background: #e03e3e;
    }

    .history-panel #submissionDetail {
      margin-top: 1rem;
    }

    .history-panel #submissionCode {
      background: rgba(255, 255, 255, 0.1);
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
    }

    .history-panel #submissionCode pre {
      margin: 0;
      white-space: pre-wrap;
      word-wrap: break-word;
      color: #fff;
    }

    .history-panel #testCaseResults {
      background: rgba(255, 255, 255, 0.1);
      padding: 1rem;
      border-radius: 8px;
    }

    .history-panel #testCaseResults p {
      margin: 0.5rem 0;
    }

    .history-panel #testCaseResults .passed {
      color: #28a745;
    }

    .history-panel #testCaseResults .failed {
      color: #ff4d4d;
    }

    .stopwatch {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .stopwatch i {
      color: #ff4d4d;
      font-size: 1.2rem;
    }

    .stopwatch span {
      font-size: 1rem;
      color: #fff;
    }

    @media (max-width: 1024px) {
      .main-container {
        flex-direction: column;
        margin: 1rem auto;
      }

      .left-panel,
      .right-panel {
        width: 100%;
      }

      .history-panel {
        width: 100vw;
        right: -100vw;
      }
    }

    @media (max-width: 576px) {
      .left-panel .problem-header strong {
        font-size: 1.5rem;
      }

      .button-container {
        justify-content: center;
      }

      .btn-custom {
        width: 100%;
        padding: 0.4rem 0.8rem;
        font-size: 0.8rem;
      }
    }
    p {
        white-space: pre-line;
      }

  </style>
</head>

<body>
  <%- include('partials/nav') %>

  <div class="main-container">
    <!-- Left Panel: Problem Details -->
    <div class="left-panel">
      <div class="problem-header">
        <strong><%= problem.id + ". " + problem.title %></strong>
      </div>
      <p><%= problem.description %></p>

      <div class="example-section">
        <h5>Examples:</h5>
        <ul class="testcase-list">
          <% problem.examples.forEach(example => { %>
            <li><strong>Input:</strong> <%= example.input %><br><strong>Output:</strong> <%= example.output %></li>
          <% }); %>
        </ul>
      </div>

      <div class="testcase-section">
        <h5>Test Cases:</h5>
        <ul class="testcase-list">
          <% problem.run_test.forEach(test => { %>
            <li>
              <strong>Input:</strong> <%= test.input.join(" ") %><br>
              <strong>Expected Output:</strong> <%= test.output %>
            </li>
          <% }); %>
        </ul>
      </div>
      

      <div class="example-section">
        <h5>Constraints:</h5>
        <p><%= problem.constraints %></p>
      </div>

      <% if (problem.input_form) { %>
      <div class="input-format-section">
        <h5>Input Format:</h5>
        <p><%= problem.input_form %></p>
      </div>
      <% } %>
    </div>

    <!-- Right Panel: Code Editor + Terminal -->
    <div class="right-panel">
      <div class="code-editor-container">
        <div class="editor-header">
          <select class="form-select" id="language" style="width: 150px; background: #2a2a2a; color: #fff; border: none;">
            <option value="javascript">JavaScript</option>
            <option value="python">Python</option>
            <option value="java">Java</option>
            <option value="cpp">C++</option>
            <option value="c">C</option>
          </select>
          <div class="stopwatch">
            <i class="fas fa-stopwatch"></i>
            <span id="stopwatchTime">00:00:00</span>
            <button class="btn-custom" id="toggleStopwatch">Start</button>
            <button class="btn-custom" id="resetStopwatch">Reset</button>
          </div>
        </div>
        <textarea id="codeEditor"></textarea>
      </div>

      <div class="terminal-container" id="terminalOutput">
        <div class="terminal-content" id="terminalContent">
          <p>Terminal output will appear here...</p>
        </div>
        <button class="btn btn-sm" id="copyTerminal" title="Copy to clipboard">
          <i class="fas fa-copy"></i> Copy
        </button>
      </div>

      <div class="button-container">
        <button class="btn-custom btn-ai" id="askAI">Ask AI</button>
        <button class="btn-custom btn-syntax" id="correctSyntax">Correct Syntax</button>
        <button class="btn-custom btn-run" id="runCode">Run Code <span class="spinner" style="display: none;"></span></button>
        <button class="btn-custom btn-submit" id="submitCode">Submit Code <span class="spinner" style="display: none;"></span></button>
        <button class="btn-custom btn-history" id="showHistory">History</button>
      </div>
    </div>
  </div>

  <!-- Submission History Panel -->
  <div class="history-panel" id="historyPanel">
    <h4>Submission History</h4>
    <button id="closeHistory" title="Close"><i class="fas fa-times"></i></button>
    <div id="historyContent">
      <p>Loading submissions...</p>
    </div>
    <div id="submissionDetail" style="display: none;">
      <h5>Submission Details</h5>
      <button id="backToList" class="btn-custom">Back</button>
      <div id="submissionCode">
        <pre id="codeContent"></pre>
        <button id="copyCode" class="btn-custom">Copy Code</button>
      </div>
      <div id="testCaseResults"></div>
    </div>
  </div>

  <!-- Scripts -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/codemirror.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/javascript/javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/python/python.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/mode/clike/clike.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/show-hint.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/javascript-hint.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.13/addon/hint/anyword-hint.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", async function () {
      const languageMap = {
        cpp: { id: 54, defaultCode: "#include <iostream>\nusing namespace std;\n\nint main() {\n\tcout << \"Hello World!\";\n\treturn 0;\n}" },
        java: { id: 91, defaultCode: `public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello World!");\n    }\n}` },
        python: { id: 71, defaultCode: "print(\"Hello World!\")" },
        javascript: { id: 102, defaultCode: "console.log(\"Hello World!\");" },
        c: { id: 52, defaultCode: "#include<stdio.h>\nint main()\n{\n    printf(\"Hello world\");\n    return 0;\n}" },
      };

      // Initialize CodeMirror with default value
      const editor = CodeMirror.fromTextArea(document.getElementById("codeEditor"), {
        mode: "javascript",
        theme: "monokai",
        lineNumbers: true,
        extraKeys: { "Ctrl-Space": "autocomplete" },
        hintOptions: { hint: CodeMirror.hint.anyword },
        lineWrapping: true,
        scrollPastEnd: false,
        value: languageMap["javascript"].defaultCode.trim() // Set initial value
      });

      function setEditorMode(language) {
        const modeMap = { javascript: "javascript", python: "python", java: "text/x-java", cpp: "text/x-c++src", c: "text/x-csrc" };
        editor.setOption("mode", modeMap[language] || "javascript");
      }

      const languageSelect = document.getElementById("language");
      let currentLanguage = languageSelect.value;

      // Load last submission or set default code
      const userId = "<%= user?._id || '' %>";
      const problemId = "<%= problem._id %>";
      if (userId && problemId) {
        try {
          const response = await fetch(`/submission-history?userId=${userId}&problemId=${problemId}`);
          if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
          const history = await response.json();
          if (history && history.length > 0) {
            const lastSubmission = history[0];
            editor.setValue(lastSubmission.code.trim());
            setEditorMode(lastSubmission.language);
            languageSelect.value = lastSubmission.language;
            currentLanguage = lastSubmission.language;
          } else {
            setEditorMode(currentLanguage);
            editor.setValue(languageMap[currentLanguage].defaultCode.trim());
          }
        } catch (error) {
          console.error('Error loading last submission:', error);
          setEditorMode(currentLanguage);
          editor.setValue(languageMap[currentLanguage].defaultCode.trim());
          // Optionally display error in terminal
          document.getElementById("terminalContent").innerHTML = `<pre>Error loading submission: ${error.message}</pre>`;
        }
      } else {
        setEditorMode(currentLanguage);
        editor.setValue(languageMap[currentLanguage].defaultCode.trim());
      }

      languageSelect.addEventListener("change", function () {
        const selectedLanguage = this.value;
        setEditorMode(selectedLanguage);
        const currentCode = editor.getValue().trim();
        const previousDefaultCode = languageMap[currentLanguage].defaultCode.trim();
        const newDefaultCode = languageMap[selectedLanguage].defaultCode.trim();
        if (!currentCode || currentCode === previousDefaultCode) {
          editor.setValue(newDefaultCode);
        }
        currentLanguage = selectedLanguage;
      });

      // Terminal Setup
      const terminalContent = document.getElementById("terminalContent");
      let isAskingAI = false;

      function updateTerminal(message) {
        terminalContent.contentEditable = false;
        const maxLineLength = 80;
        let formattedMessage = "";
        if (message.toLowerCase().includes("error") && message.length > maxLineLength) {
          const words = message.split(" ");
          let currentLine = "";
          words.forEach(word => {
            if ((currentLine + word).length > maxLineLength) {
              formattedMessage += currentLine.trim() + "\n";
              currentLine = word + " ";
            } else {
              currentLine += word + " ";
            }
          });
          formattedMessage += currentLine.trim();
        } else {
          formattedMessage = message;
        }
        const maxTotalLength = 1000;
        formattedMessage = formattedMessage.length > maxTotalLength 
          ? formattedMessage.substring(0, maxTotalLength) + "..." 
          : formattedMessage;
        terminalContent.innerHTML = `<pre>${formattedMessage}</pre>`;
        isAskingAI = false;
      }

      function enableTerminalInput() {
        terminalContent.contentEditable = true;
        terminalContent.innerHTML = '<p style="color: #bbb;">Type your query here and press Enter...</p>';
        terminalContent.focus();
        isAskingAI = true;

        terminalContent.addEventListener("click", function removePlaceholder() {
          if (terminalContent.innerHTML === '<p style="color: #bbb;">Type your query here and press Enter...</p>') {
            terminalContent.innerHTML = "";
          }
        }, { once: true });
      }

      // Loading Indicators
      function toggleLoading(button, isLoading) {
        const spinner = button.querySelector('.spinner');
        if (isLoading) {
          button.disabled = true;
          spinner.style.display = 'inline-block';
        } else {
          button.disabled = false;
          spinner.style.display = 'none';
        }
      }

      // Run Code
      document.getElementById("runCode").addEventListener("click", async function () {
        toggleLoading(this, true);
        const code = editor.getValue();
        const language = languageSelect.value;
        const problemId = "<%= problem._id %>";
        try {
          const response = await fetch("/run-code", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ code, language, problemId }),
          });
          const result = await response.json();
          if (result.testCaseResults) {
            let output = "Test Case Results:\n\n";
            result.testCaseResults.forEach((tc, i) => {
              output += `Test Case ${i + 1}:\n` +
                        `  Status: ${tc.passed ? "Passed" : "Failed"}\n` +
                        `  Input: ${tc.input || "N/A"}\n` +
                        `  Expected Output: ${tc.expectedOutput || "N/A"}\n` +
                        `  Actual Output: ${tc.actualOutput || "N/A"}\n` +
                        (tc.error ? `  Error: ${tc.error}\n` : "") +
                        "------------------------\n";
            });
            updateTerminal(output.trim());
          } else {
            updateTerminal("Error: " + JSON.stringify(result));
          }
        } catch (error) {
          updateTerminal("Error running code: " + error.message);
        } finally {
          toggleLoading(this, false);
        }
      });

      // Submit Code
      document.getElementById("submitCode").addEventListener("click", async function () {
        toggleLoading(this, true);
        const userId = "<%= user?._id || '' %>";
        if (!userId) {
          updateTerminal("Error: You must be logged in to submit code.");
          toggleLoading(this, false);
          return;
        }
        const code = editor.getValue();
        const language = languageSelect.value;
        const problemId = "<%= problem._id %>";
        try {
          const response = await fetch("/submit-solution", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ code, language, userId, problemId }),
          });
          const result = await response.json();
          if (result.testCaseResults) {
            let output = "Submission Results:\n\n";
            result.testCaseResults.forEach((tc, i) => {
              output += `Test Case ${i + 1}:\n` +
                        `  Status: ${tc.passed ? "Passed" : "Failed"}\n` +
                        `  Input: ${tc.input || "N/A"}\n` +
                        `  Expected Output: ${tc.expectedOutput || "N/A"}\n` +
                        `  Actual Output: ${tc.actualOutput || "N/A"}\n` +
                        (tc.error ? `  Error: ${tc.error}\n` : "") +
                        "------------------------\n";
            });
            output += `\nFinal Status: ${result.submissionStatus || "Unknown"}`;
            updateTerminal(output.trim());
          } else {
            updateTerminal("Error: " + JSON.stringify(result));
          }
        } catch (error) {
          updateTerminal("Error submitting code: " + error.message);
        } finally {
          toggleLoading(this, false);
        }
      });

      // Ask AI
      document.getElementById("askAI").addEventListener("click", function () {
        enableTerminalInput();
      });

      terminalContent.addEventListener("keydown", async function (event) {
        if (isAskingAI && event.key === "Enter" && !event.shiftKey) {
          event.preventDefault();
          const query = terminalContent.textContent.trim();
          if (!query || query === "Type your query here and press Enter...") {
            updateTerminal("Error: Please enter a valid query.");
            return;
          }
          updateTerminal("Asking AI...");
          const code = editor.getValue();
          const language = languageSelect.value;
          const problemDescription = "<%= problem.description %>";
          const input_form = "<%= problem.input_form %>";

          try {
            const response = await fetch("/ai/ask-ai", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ code, language, problemDescription, query, input_form }),
            });
            const result = await response.json();
            if (result.success) {
              updateTerminal(result.suggestion || "No suggestion provided by AI.");
            } else {
              updateTerminal("Error: " + (result.error || "Unknown AI error"));
            }
          } catch (error) {
            updateTerminal("Error contacting AI: " + error.message);
          }
        }
      });

      // Correct Syntax
      document.getElementById("correctSyntax").addEventListener("click", async function () {
        const code = editor.getValue();
        const language = languageSelect.value;
        try {
          updateTerminal("Correcting syntax...");
          const response = await fetch("/ai/correct-syntax", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ code, language }),
          });
          const result = await response.json();
          if (result.success) {
            if (result.correctedCode) {
              editor.setValue(result.correctedCode);
              updateTerminal("Syntax corrected!");
            } else {
              updateTerminal("No syntax errors found!");
            }
          } else {
            updateTerminal("Error: " + (result.error || "Unknown error"));
          }
        } catch (error) {
          updateTerminal("Error: " + error.message);
        }
      });

      // Submission History
      const historyPanel = document.getElementById("historyPanel");
      document.getElementById("showHistory").addEventListener("click", async function (event) {
        event.stopPropagation();
        const historyContent = document.getElementById("historyContent");
        const submissionDetail = document.getElementById("submissionDetail");
        historyPanel.classList.add("active");
        historyContent.style.display = "block";
        submissionDetail.style.display = "none";

        if (!userId) {
          historyContent.innerHTML = "<p>Error: You must be logged in to view submission history.</p>";
          return;
        }

        try {
          const response = await fetch(`/submission-history?userId=${userId}&problemId=${problemId}`);
          const history = await response.json();
          if (history && history.length > 0) {
            let html = history.map(sub => `
              <div class="history-entry" data-submission-id="${sub._id}">
                <p><strong>Time:</strong> ${new Date(sub.submittedAt).toLocaleString()}</p>
                <p><strong>Status:</strong> ${sub.status}</p>
                <p><strong>Language:</strong> ${sub.language}</p>
              </div>
            `).join("");
            historyContent.innerHTML = html;

            document.querySelectorAll(".history-entry").forEach(entry => {
              entry.addEventListener("click", function (event) {
                event.stopPropagation();
                const submissionId = this.getAttribute("data-submission-id");
                const submission = history.find(sub => sub._id === submissionId);
                showSubmissionDetail(submission);
              });
            });
          } else {
            historyContent.innerHTML = "<p>No submissions yet.</p>";
          }
        } catch (error) {
          historyContent.innerHTML = `<p>Error: ${error.message}</p>`;
        }
      });

      document.getElementById("closeHistory").addEventListener("click", function (event) {
        event.stopPropagation();
        historyPanel.classList.remove("active");
      });

      function showSubmissionDetail(submission) {
        const historyContent = document.getElementById("historyContent");
        const submissionDetail = document.getElementById("submissionDetail");
        const codeContent = document.getElementById("codeContent");
        const testCaseResults = document.getElementById("testCaseResults");

        historyContent.style.display = "none";
        submissionDetail.style.display = "block";

        codeContent.textContent = submission.code;

        let testCaseHtml = submission.testCaseResults.map((tc, i) => `
          <p><strong>Test Case ${i + 1}:</strong> 
            <span class="${tc.passed ? 'passed' : 'failed'}">${tc.passed ? 'Passed' : 'Failed'}</span></p>
          <p>Input: ${tc.input || 'N/A'}</p>
          <p>Expected Output: ${tc.expectedOutput || 'N/A'}</p>
          <p>Actual Output: ${tc.actualOutput || 'N/A'}</p>
          ${tc.error ? `<p>Error: ${tc.error}</p>` : ''}
          <hr>
        `).join("");
        testCaseResults.innerHTML = testCaseHtml || "<p>No test case results available.</p>";

        document.getElementById("copyCode").onclick = function () {
          navigator.clipboard.writeText(submission.code).then(() => {
            this.textContent = "Copied!";
            setTimeout(() => this.textContent = "Copy Code", 2000);
          });
        };
      }

      document.getElementById("backToList").addEventListener("click", function (event) {
        event.stopPropagation();
        document.getElementById("historyContent").style.display = "block";
        document.getElementById("submissionDetail").style.display = "none";
      });

      // Close history panel on outside click
      document.addEventListener("click", function (event) {
        if (historyPanel.classList.contains("active") && !historyPanel.contains(event.target)) {
          historyPanel.classList.remove("active");
        }
      });

      // Stopwatch
      let stopwatchInterval = null;
      let time = 0;
      const stopwatchTime = document.getElementById("stopwatchTime");
      const toggleStopwatch = document.getElementById("toggleStopwatch");
      const resetStopwatch = document.getElementById("resetStopwatch");

      function updateStopwatch() {
        const hours = Math.floor(time / 3600).toString().padStart(2, '0');
        const minutes = Math.floor((time % 3600) / 60).toString().padStart(2, '0');
        const seconds = (time % 60).toString().padStart(2, '0');
        stopwatchTime.textContent = `${hours}:${minutes}:${seconds}`;
      }

      toggleStopwatch.addEventListener("click", function () {
        if (stopwatchInterval) {
          clearInterval(stopwatchInterval);
          stopwatchInterval = null;
          this.textContent = "Start";
        } else {
          stopwatchInterval = setInterval(() => {
            time++;
            updateStopwatch();
          }, 1000);
          this.textContent = "Stop";
        }
      });

      resetStopwatch.addEventListener("click", function () {
        if (stopwatchInterval) {
          clearInterval(stopwatchInterval);
          stopwatchInterval = null;
          toggleStopwatch.textContent = "Start";
        }
        time = 0;
        updateStopwatch();
      });

      // Copy Terminal
      document.getElementById("copyTerminal").addEventListener("click", function () {
        const content = terminalContent.textContent.trim();
        navigator.clipboard.writeText(content).then(() => {
          this.innerHTML = '<i class="fas fa-check"></i> Copied!';
          setTimeout(() => this.innerHTML = '<i class="fas fa-copy"></i> Copy', 2000);
        });
      });
    });
  </script>
</body>
</html>